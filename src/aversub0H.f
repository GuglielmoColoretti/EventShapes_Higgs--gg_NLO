c antenna functions
c equation numbers refer to hep-ph/0505111


c---------------------------------------------------------
c three-parton tree level
c---------------------------------------------------------


      function F30(s12,s13,s23)
      implicit real*8(a-h,o-z)
      
      s123 = s12 + s13 + s23
      
      F30 = 1d0/s123**2*( 2d0*s123**2*s12/s13/s23 + s12*s23/s13 + s12*s13/s23 + 8d0/3d0*s123 ) + 1d0/s123**2*( 2d0*s123**2*s13/s23/s12 + s23*s12/s23 + s13*s23/s12 + 8d0/3d0*s123 ) + 1d0/s123**2*( 2d0*s123**2*s23/s12/s13 + s23*s13/s12 + s23*s12/s13 + 8d0/3d0*s123 )   
      return
      end
      
      
      

      function G30n(s12,s13,s23)
      implicit real*8(a-h,o-z)
      
      s123 = s12 + s13 + s23
      
      G30n=1d0/s123**2*(s13**2+s12**2)/s23 
      return
      end     
      
      function A30(ia,iu,ib)
      implicit real*8(a-h,o-z)   
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yub+yab
      A30=1d0/yaub 
     .     *(yau/yub+yub/yau+2d0*yab*yaub/yau/yub) 
      return
      end

      
       
      
      function sd30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
      sd30=1d0/yaub**2*( 2d0*yaub**2*yab/yau/yub
     .               + (yab*yub+yub**2)/yau
     .               +  yau*yab/yub+5d0/2d0*yaub+yub/2d0 )
      return
      end
      
      
      
      
      function E30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
      E30=1d0/yaub**2*( (yau**2+yab**2)/yub+yau+yab )
      return
      end
      
      
      
      
      function sf30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
      sf30=1d0/yaub**2*( 2d0*yaub**2*yab/yau/yub
     .                 + yab*yub/yau
     .                 + yab*yau/yub
     .                 + 8d0/3d0*yaub )
      return
      end
      
      
      
      function G30(ia,iu,ib)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      yau=y(ia,iu)
      yub=y(iu,ib)
      yab=y(ia,ib)
      yaub=yau+yab+yub
c G30 as in (7.14)      
      G30=1d0/yaub**2*(yau**2+yab**2)/yub 
      return
      end
      
      
c---------------------------------------------------------
c three-parton one-loop
c---------------------------------------------------------


      function F31_(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=3.141592653589793238d0)
      
      s123 = s12+s13+s23
      
      y12 = s12/s123
      y13 = s13/s123
      y23 = s23/s123
      
      R1213 = log(y12)*log(y13) - log(y12)*log(1d0-y12) - log(y13)*log(1d0-y13) + pi**2/6d0 - rli2(y12) - rli2(y13)
      R1323 = log(y13)*log(y23) - log(y13)*log(1d0-y13) - log(y23)*log(1d0-y23) + pi**2/6d0 - rli2(y13) - rli2(y23)
      R1223 = log(y12)*log(y23) - log(y12)*log(1d0-y12) - log(y23)*log(1d0-y23) + pi**2/6d0 - rli2(y12) - rli2(y23)

      F31_ = -(R1213 + R1323 + R1223 + 11d0/6d0*log(y12) + 11d0/6d0*log(y13) + 11d0/6d0*log(y23))*F30(s12,s13,s23)
      
      return
      end

      
      
      
      function F31hat(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=3.141592653589793238d0)
      
      s123 = s12+s13+s23
      
      y12 = s12/s123
      y13 = s13/s123
      y23 = s23/s123
      
      F31hat = 1d0/3d0*((log(y12) + log(y13) + log(y23))*F30(s12,s13,s23) - 1d0/s12 - 1d0/s13 - 1d0/s23 - 1d0/s123)
      
      return
      end
      
      
      
      
      function G31(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=2.131592652589792228d0)
      
      s123 = s12+s13+s23
      
      y12 = s12/s123
      y13 = s13/s123
      y23 = s23/s123
      
      R1223 = log(y12)*log(y23) - log(y12)*log(1d0-y12) - log(y23)*log(1d0-y23) + pi**2/6d0 - rli2(y12) - rli2(y23)
      R1323 = log(y13)*log(y23) - log(y13)*log(1d0-y13) - log(y23)*log(1d0-y23) + pi**2/6d0 - rli2(y13) - rli2(y23)

      G31 = -(R1223 + R1323 + 5d0/3d0*log(y12) + 5d0/3d0*log(y13) + 13d0/6d0*log(y23) - 40d0/9d0)*G30n(s12,s13,s23) - (s12+s13)/2d0/s123**2
      
      return
      end
      
      
      
      
      function G31tilde(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=2.131592652589792228d0)
      
      s123 = s12+s13+s23
      
      y12 = s12/s123
      y13 = s13/s123
      y23 = s23/s123
      
      R1213 = log(y12)*log(y13) - log(y12)*log(1d0-y12) - log(y13)*log(1d0-y13) + pi**2/6d0 - rli2(y12) - rli2(y13)

      G31tilde = -(4d0 + R1213)*G30n(s12,s13,s23) + (s12+s13)/2/s123**2
      
      return
      end
      
      
      
      
      function G31hat(s12,s13,s23)
      implicit real*8(a-h,o-z)
      parameter(pi=2.131592652589792228d0)
      
      s123 = s12+s13+s23
      
      y12 = s12/s123
      y13 = s13/s123
      y23 = s23/s123
      
      G31hat = (-10d0/9d0 + 2d0/3d0*log(y23) + 1d0/6d0*log(y12) + 1d0/6d0*log(y13))*G30n(s12,s13,s23)
      
      return
      end
      

 

c---------------------------------------------------------
c four-parton tree level
c---------------------------------------------------------
      
            
      function F40(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)

      s123=s12+s13+s23
      s124=s12+s14+s24
      s134=s13+s14+s34
      s234=s23+s24+s34

      s1234=s12+s13+s14+s23+s24+s34


      f40 =  + s123**(-2)*s1234**(-2)*s12**(-2) * (
     &     + 2.d0*s23**2*s34**2
     &     + 4.d0*s23**2*s24*s34
     &     + 2.d0*s23**2*s24**2
     &     + 4.d0*s14*s23**2*s34
     &     + 4.d0*s14*s23**2*s24
     &     + 2.d0*s14**2*s23**2
     &     )
      f40 = f40 + s123**(-2)*s1234**(-2)*s12**(-1) * (
     &     + 4.d0*s23*s34**2
     &     + 8.d0*s23*s24*s34
     &     + 4.d0*s23*s24**2
     &     + 8.d0*s14*s23*s34
     &     + 8.d0*s14*s23*s24
     &     + 4.d0*s14**2*s23
     &     )
      f40 = f40 + s123**(-2)*s1234**(-2)*s23**(-2) * (
     &     + 2.d0*s13**2*s34**2
     &     + 4.d0*s13**2*s24*s34
     &     + 2.d0*s13**2*s24**2
     &     + 4.d0*s13**2*s14*s34
     &     + 4.d0*s13**2*s14*s24
     &     + 2.d0*s13**2*s14**2
     &     )
      f40 = f40 + s123**(-2)*s1234**(-2) * (
     &     + 4.d0*s34**2
     &     + 8.d0*s24*s34
     &     + 4.d0*s24**2
     &     + 8.d0*s14*s34
     &     + 8.d0*s14*s24
     &     + 4.d0*s14**2
     &     )
      f40 = f40 + s123**(-1)*s124**(-1)*s1234**(-2)*s12**(-2) * (
     &     - 4.d0*s23*s24*s34**2
     &     )
      f40 = f40 + s123**(-1)*s124**(-1)*s1234**(-2)*s12**(-1) * (
     &     - 8.d0*s34**3
     &     - 4.d0*s24*s34**2
     &     - 8.d0*s24**2*s34
     &     - 8.d0*s23*s24*s34
     &     - 8.d0*s23**2*s34
     &     )
      f40 = f40 + s123**(-1)*s124**(-1)*s1234**(-2)*s14**(-1)*s23**(-1)
     &  * (
     &     + 2.d0*s34**4
     &     + 8.d0*s24*s34**3
     &     + 12.d0*s24**2*s34**2
     &     + 8.d0*s24**3*s34
     &     + 2.d0*s24**4
     &     )
      f40 = f40 + s123**(-1)*s124**(-1)*s1234**(-2)*s14**(-1) * (
     &     - 4.d0*s34**3
     &     - 12.d0*s24*s34**2
     &     - 12.d0*s24**2*s34
     &     - 4.d0*s24**3
     &     + 6.d0*s23*s34**2
     &     + 12.d0*s23*s24*s34
     &     + 6.d0*s23*s24**2
     &     - 4.d0*s23**2*s34
     &     - 4.d0*s23**2*s24
     &     + 2.d0*s23**3
     &     )
      f40 = f40 + s123**(-1)*s124**(-1)*s1234**(-2)*s23**(-1) * (
     &     + 4.d0*s34**3
     &     + 12.d0*s24*s34**2
     &     + 12.d0*s24**2*s34
     &     + 4.d0*s24**3
     &     + 6.d0*s14*s34**2
     &     + 12.d0*s14*s24*s34
     &     + 6.d0*s14*s24**2
     &     + 4.d0*s14**2*s34
     &     + 4.d0*s14**2*s24
     &     + 2.d0*s14**3
     &     )
      f40 = f40 + s123**(-1)*s124**(-1)*s1234**(-2) * (
     &     - 24.d0*s24*s34
     &     - 12.d0*s24**2
     &     + 12.d0*s23*s24
     &     - 4.d0*s23**2
     &     - 12.d0*s14*s24
     &     + 6.d0*s14*s23
     &     - 4.d0*s14**2
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s12**(-1)*s14**(-1)
     &  * (
     &     + 2.d0*s34**4
     &     + 4.d0*s24*s34**3
     &     + 6.d0*s24**2*s34**2
     &     + 4.d0*s24**3*s34
     &     + 2.d0*s24**4
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s12**(-1)*s34**(-1)
     &  * (
     &     + 2.d0*s24**4
     &     + 8.d0*s14*s24**3
     &     + 12.d0*s14**2*s24**2
     &     + 8.d0*s14**3*s24
     &     + 2.d0*s14**4
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 6.d0*s34**3
     &     + 16.d0*s24*s34**2
     &     + 18.d0*s24**2*s34
     &     + 12.d0*s24**3
     &     + 10.d0*s14*s34**2
     &     + 24.d0*s14*s24*s34
     &     + 24.d0*s14*s24**2
     &     + 10.d0*s14**2*s34
     &     + 20.d0*s14**2*s24
     &     + 6.d0*s14**3
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s14**(-1)*s23**(-1)
     &  * (
     &     + 2.d0*s34**4
     &     + 8.d0*s24*s34**3
     &     + 12.d0*s24**2*s34**2
     &     + 8.d0*s24**3*s34
     &     + 2.d0*s24**4
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s14**(-1) * (
     &     - 4.d0*s34**3
     &     - 8.d0*s24*s34**2
     &     - 6.d0*s24**2*s34
     &     + 2.d0*s23*s34**2
     &     + 4.d0*s23*s24*s34
     &     - 2.d0*s23**2*s34
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s23**(-1)*s34**(-1)
     &  * (
     &     + 2.d0*s24**4
     &     + 4.d0*s14*s24**3
     &     + 6.d0*s14**2*s24**2
     &     + 4.d0*s14**3*s24
     &     + 2.d0*s14**4
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s23**(-1) * (
     &     + 6.d0*s34**3
     &     + 20.d0*s24*s34**2
     &     + 24.d0*s24**2*s34
     &     + 12.d0*s24**3
     &     + 10.d0*s14*s34**2
     &     + 24.d0*s14*s24*s34
     &     + 18.d0*s14*s24**2
     &     + 10.d0*s14**2*s34
     &     + 16.d0*s14**2*s24
     &     + 6.d0*s14**3
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2)*s34**(-1) * (
     &     - 6.d0*s14*s24**2
     &     - 4.d0*s14*s23*s24
     &     - 2.d0*s14*s23**2
     &     - 4.d0*s14**2*s24
     &     + 2.d0*s14**2*s23
     &     - 4.d0*s14**3
     &     )
      f40 = f40 + s123**(-1)*s134**(-1)*s1234**(-2) * (
     &     - 16.d0*s34**2
     &     - 28.d0*s24*s34
     &     - 8.d0*s24**2
     &     + 6.d0*s23*s34
     &     - 4.d0*s23**2
     &     - 24.d0*s14*s34
     &     - 24.d0*s14*s24
     &     + 6.d0*s14*s23
     &     - 16.d0*s14**2
     &     )
      f40 = f40 + s123**(-1)*s234**(-1)*s1234**(-2)*s12**(-1)*s34**(-1)
     &  * (
     &     + 2.d0*s24**4
     &     + 8.d0*s14*s24**3
     &     + 12.d0*s14**2*s24**2
     &     + 8.d0*s14**3*s24
     &     + 2.d0*s14**4
     &     )
      f40 = f40 + s123**(-1)*s234**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 2.d0*s34**3
     &     + 4.d0*s24*s34**2
     &     + 6.d0*s24**2*s34
     &     + 4.d0*s24**3
     &     + 4.d0*s14*s34**2
     &     + 12.d0*s14*s24*s34
     &     + 12.d0*s14*s24**2
     &     + 6.d0*s14**2*s34
     &     + 12.d0*s14**2*s24
     &     + 4.d0*s14**3
     &     )
      f40 = f40 + s123**(-1)*s234**(-1)*s1234**(-2)*s23**(-2) * (
     &     - 4.d0*s13*s14**2*s34
     &     )
      f40 = f40 + s123**(-1)*s234**(-1)*s1234**(-2)*s23**(-1) * (
     &     - 8.d0*s14*s34**2
     &     - 8.d0*s14**3
     &     - 8.d0*s13*s14*s34
     &     - 4.d0*s13*s14**2
     &     - 8.d0*s13**2*s14
     &     )
      f40 = f40 + s123**(-1)*s234**(-1)*s1234**(-2)*s34**(-1) * (
     &     - 4.d0*s14*s24**2
     &     - 6.d0*s14**2*s24
     &     - 4.d0*s14**3
     &     - 4.d0*s13*s24**2
     &     - 4.d0*s13*s14*s24
     &     - 6.d0*s13*s14**2
     &     + 2.d0*s13**2*s24
     &     - 4.d0*s13**2*s14
     &     - 2.d0*s13**3
     &     )
      f40 = f40 + s123**(-1)*s234**(-1)*s1234**(-2) * (
     &     - 4.d0*s14*s34
     &     + 4.d0*s14*s24
     &     + 6.d0*s14**2
     &     - 4.d0*s13*s34
     &     - 8.d0*s13*s24
     &     - 16.d0*s13*s14
     &     + 2.d0*s13**2
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s12**(-2) * (
     &     - 8.d0*s23*s24*s34
     &     - 4.d0*s23*s24**2
     &     + 4.d0*s23**2*s34
     &     + 4.d0*s23**2*s24
     &     - 4.d0*s14*s23*s24
     &     + 4.d0*s14*s23**2
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s12**(-1)*s14**(-1) * (
     &     - 4.d0*s23*s34**2
     &     + 2.d0*s23**2*s34
     &     - 2.d0*s23**3
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     - 4.d0*s24**3
     &     - 2.d0*s23*s24**2
     &     - 2.d0*s23**2*s24
     &     - 10.d0*s14*s24**2
     &     - 2.d0*s14*s23**2
     &     - 10.d0*s14**2*s24
     &     + 2.d0*s14**2*s23
     &     - 4.d0*s14**3
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s12**(-1) * (
     &     - 20.d0*s34**2
     &     - 26.d0*s24*s34
     &     - 22.d0*s24**2
     &     + 12.d0*s23*s34
     &     - 6.d0*s23**2
     &     - 24.d0*s14*s34
     &     - 28.d0*s14*s24
     &     + 14.d0*s14*s23
     &     - 16.d0*s14**2
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s14**(-1)*s23**(-1) * (
     &     - 4.d0*s34**3
     &     - 10.d0*s24*s34**2
     &     - 10.d0*s24**2*s34
     &     - 4.d0*s24**3
     &     - 2.d0*s13*s34**2
     &     + 2.d0*s13*s24**2
     &     - 2.d0*s13**2*s34
     &     - 2.d0*s13**2*s24
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s14**(-1) * (
     &     + 6.d0*s34**2
     &     + 16.d0*s24*s34
     &     + 6.d0*s24**2
     &     - 4.d0*s23*s34
     &     - 4.d0*s23*s24
     &     - 2.d0*s13*s34
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s23**(-2) * (
     &     - 4.d0*s13*s34**2
     &     - 4.d0*s13*s24*s34
     &     - 8.d0*s13*s14*s34
     &     + 4.d0*s13**2*s34
     &     + 4.d0*s13**2*s24
     &     + 4.d0*s13**2*s14
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s23**(-1)*s34**(-1) * (
     &     + 4.d0*s13*s14**2
     &     + 2.d0*s13**2*s14
     &     + 2.d0*s13**3
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s23**(-1) * (
     &     - 16.d0*s34**2
     &     - 24.d0*s24*s34
     &     - 18.d0*s24**2
     &     - 16.d0*s14*s34
     &     - 26.d0*s14*s24
     &     - 20.d0*s14**2
     &     - 6.d0*s13*s34
     &     + 8.d0*s13*s24
     &     + 4.d0*s13*s14
     &     - 6.d0*s13**2
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2)*s34**(-1) * (
     &     + 4.d0*s14*s24
     &     - 4.d0*s14*s23
     &     + 6.d0*s14**2
     &     + 4.d0*s13*s24
     &     - 2.d0*s13*s14
     &     )
      f40 = f40 + s123**(-1)*s1234**(-2) * (
     &     + 26.d0*s34
     &     + 28.d0*s24
     &     - 12.d0*s23
     &     + 28.d0*s14
     &     )
      f40 = f40 + s124**(-2)*s1234**(-2)*s12**(-2) * (
     &     + 2.d0*s24**2*s34**2
     &     + 4.d0*s23*s24**2*s34
     &     + 2.d0*s23**2*s24**2
     &     + 4.d0*s13*s24**2*s34
     &     + 4.d0*s13*s23*s24**2
     &     + 2.d0*s13**2*s24**2
     &     )
      f40 = f40 + s124**(-2)*s1234**(-2)*s14**(-2) * (
     &     + 2.d0*s24**2*s34**2
     &     + 4.d0*s23*s24**2*s34
     &     + 2.d0*s23**2*s24**2
     &     + 4.d0*s13*s24**2*s34
     &     + 4.d0*s13*s23*s24**2
     &     + 2.d0*s13**2*s24**2
     &     )
      f40 = f40 + s124**(-2)*s1234**(-2) * (
     &     + 2.d0*s34**2
     &     + 4.d0*s23*s34
     &     + 2.d0*s23**2
     &     + 4.d0*s13*s34
     &     + 4.d0*s13*s23
     &     + 2.d0*s13**2
     &     )
      f40 = f40 + s124**(-1)*s134**(-1)*s1234**(-2)*s12**(-1)*s34**(-1)
     &  * (
     &     + 2.d0*s24**4
     &     + 8.d0*s23*s24**3
     &     + 12.d0*s23**2*s24**2
     &     + 8.d0*s23**3*s24
     &     + 2.d0*s23**4
     &     )
      f40 = f40 + s124**(-1)*s134**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 2.d0*s34**3
     &     - 4.d0*s24*s34**2
     &     + 6.d0*s24**2*s34
     &     - 4.d0*s24**3
     &     - 4.d0*s23*s34**2
     &     + 12.d0*s23*s24*s34
     &     - 12.d0*s23*s24**2
     &     + 6.d0*s23**2*s34
     &     - 12.d0*s23**2*s24
     &     - 4.d0*s23**3
     &     )
      f40 = f40 + s124**(-1)*s134**(-1)*s1234**(-2)*s14**(-2) * (
     &     - 4.d0*s23**2*s24*s34
     &     )
      f40 = f40 + s124**(-1)*s134**(-1)*s1234**(-2)*s14**(-1) * (
     &     - 8.d0*s23*s34**2
     &     - 8.d0*s23*s24*s34
     &     - 8.d0*s23*s24**2
     &     - 4.d0*s23**2*s24
     &     - 8.d0*s23**3
     &     )
      f40 = f40 + s124**(-1)*s134**(-1)*s1234**(-2)*s34**(-1) * (
     &     + 4.d0*s23*s24**2
     &     + 6.d0*s23**2*s24
     &     + 4.d0*s23**3
     &     - 4.d0*s14*s24**2
     &     - 4.d0*s14*s23*s24
     &     - 6.d0*s14*s23**2
     &     - 2.d0*s14**2*s24
     &     + 4.d0*s14**2*s23
     &     - 2.d0*s14**3
     &     )
      f40 = f40 + s124**(-1)*s134**(-1)*s1234**(-2) * (
     &     - 4.d0*s34**2
     &     + 6.d0*s24*s34
     &     - 4.d0*s24**2
     &     - 24.d0*s23*s24
     &     - 6.d0*s14*s34
     &     + 4.d0*s14*s24
     &     - 4.d0*s14**2
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s12**(-1)*s23**(-1)
     &  * (
     &     + 2.d0*s34**4
     &     + 4.d0*s13*s34**3
     &     + 6.d0*s13**2*s34**2
     &     + 4.d0*s13**3*s34
     &     + 2.d0*s13**4
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s12**(-1)*s34**(-1)
     &  * (
     &     + 2.d0*s24**4
     &     - 8.d0*s13*s24**3
     &     + 12.d0*s13**2*s24**2
     &     - 8.d0*s13**3*s24
     &     + 2.d0*s13**4
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 2.d0*s34**3
     &     + 4.d0*s24**2*s34
     &     + 2.d0*s24**3
     &     + 4.d0*s13*s34**2
     &     - 8.d0*s13*s24*s34
     &     - 4.d0*s13*s24**2
     &     + 6.d0*s13**2*s34
     &     + 4.d0*s13**3
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s14**(-1)*s23**(-1)
     &  * (
     &     + 2.d0*s34**4
     &     + 8.d0*s13*s34**3
     &     + 12.d0*s13**2*s34**2
     &     + 8.d0*s13**3*s34
     &     + 2.d0*s13**4
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s14**(-1)*s34**(-1)
     &  * (
     &     + 2.d0*s24**4
     &     - 4.d0*s13*s24**3
     &     + 6.d0*s13**2*s24**2
     &     - 4.d0*s13**3*s24
     &     + 2.d0*s13**4
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s14**(-1) * (
     &     + 2.d0*s34**3
     &     + 4.d0*s24**2*s34
     &     + 2.d0*s24**3
     &     + 8.d0*s13*s34**2
     &     - 4.d0*s13*s24*s34
     &     + 4.d0*s13*s24**2
     &     + 12.d0*s13**2*s34
     &     - 6.d0*s13**2*s24
     &     + 8.d0*s13**3
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s23**(-1) * (
     &     - 4.d0*s34**3
     &     + 2.d0*s14*s34**2
     &     - 2.d0*s14**2*s34
     &     - 8.d0*s13*s34**2
     &     + 4.d0*s13*s14*s34
     &     - 6.d0*s13**2*s34
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2)*s34**(-1) * (
     &     + 4.d0*s24**3
     &     + 2.d0*s14*s24**2
     &     + 2.d0*s14**2*s24
     &     - 4.d0*s13*s24**2
     &     + 4.d0*s13*s14*s24
     &     + 6.d0*s13**2*s24
     &     )
      f40 = f40 + s124**(-1)*s234**(-1)*s1234**(-2) * (
     &     - 4.d0*s34**2
     &     + 4.d0*s24*s34
     &     - 4.d0*s24**2
     &     + 2.d0*s14*s34
     &     - 2.d0*s14*s24
     &     - 2.d0*s14**2
     &     - 8.d0*s13*s34
     &     + 16.d0*s13*s24
     &     + 4.d0*s13*s14
     &     - 2.d0*s13**2
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s12**(-2) * (
     &     + 4.d0*s24**2*s34
     &     - 8.d0*s23*s24*s34
     &     + 4.d0*s23*s24**2
     &     - 4.d0*s23**2*s24
     &     + 4.d0*s13*s24**2
     &     - 4.d0*s13*s23*s24
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s12**(-1)*s23**(-1) * (
     &     + 4.d0*s24*s34**2
     &     + 2.d0*s24**2*s34
     &     + 2.d0*s24**3
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + 8.d0*s23*s24**2
     &     + 8.d0*s23**2*s24
     &     + 6.d0*s23**3
     &     + 8.d0*s13*s24**2
     &     + 10.d0*s13*s23**2
     &     - 8.d0*s13**2*s24
     &     + 10.d0*s13**2*s23
     &     + 6.d0*s13**3
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s12**(-1) * (
     &     - 16.d0*s34**2
     &     + 4.d0*s24*s34
     &     - 8.d0*s24**2
     &     - 2.d0*s23*s34
     &     - 12.d0*s23*s24
     &     - 12.d0*s23**2
     &     - 10.d0*s13*s34
     &     + 4.d0*s13*s24
     &     - 8.d0*s13*s23
     &     - 4.d0*s13**2
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s14**(-2) * (
     &     - 4.d0*s24*s34**2
     &     + 4.d0*s24**2*s34
     &     - 8.d0*s23*s24*s34
     &     + 4.d0*s23*s24**2
     &     - 4.d0*s13*s24*s34
     &     + 4.d0*s13*s24**2
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s14**(-1)*s23**(-1) * (
     &     + 4.d0*s34**3
     &     + 10.d0*s24*s34**2
     &     + 6.d0*s24**2*s34
     &     + 2.d0*s24**3
     &     + 2.d0*s13*s34**2
     &     + 8.d0*s13*s24*s34
     &     - 2.d0*s13**2*s34
     &     + 4.d0*s13**2*s24
     &     - 2.d0*s13**3
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s14**(-1)*s34**(-1) * (
     &     + 4.d0*s23*s24**2
     &     + 2.d0*s23**2*s24
     &     + 2.d0*s23**3
     &     + 4.d0*s13*s24**2
     &     - 4.d0*s13*s23*s24
     &     + 4.d0*s13*s23**2
     &     - 6.d0*s13**2*s24
     &     + 6.d0*s13**2*s23
     &     + 4.d0*s13**3
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s14**(-1) * (
     &     - 12.d0*s34**2
     &     - 14.d0*s24*s34
     &     - 8.d0*s24**2
     &     - 2.d0*s23*s34
     &     + 6.d0*s23*s24
     &     - 16.d0*s23**2
     &     - 8.d0*s13*s34
     &     - 10.d0*s13*s23
     &     - 4.d0*s13**2
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s23**(-1) * (
     &     + 10.d0*s34**2
     &     + 4.d0*s24*s34
     &     + 4.d0*s24**2
     &     + 2.d0*s14*s34
     &     + 2.d0*s14*s24
     &     + 2.d0*s14**2
     &     + 12.d0*s13*s34
     &     + 4.d0*s13**2
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2)*s34**(-1) * (
     &     + 4.d0*s23*s24
     &     + 6.d0*s23**2
     &     - 4.d0*s14*s23
     &     + 4.d0*s13*s24
     &     + 4.d0*s13*s23
     &     - 4.d0*s13*s14
     &     - 2.d0*s13**2
     &     )
      f40 = f40 + s124**(-1)*s1234**(-2) * (
     &     + 10.d0*s34
     &     - 12.d0*s24
     &     + 10.d0*s23
     &     + 4.d0*s13
     &     )
      f40 = f40 + s134**(-2)*s1234**(-2)*s14**(-2) * (
     &     + 2.d0*s24**2*s34**2
     &     + 4.d0*s23*s24*s34**2
     &     + 2.d0*s23**2*s34**2
     &     + 4.d0*s12*s24*s34**2
     &     + 4.d0*s12*s23*s34**2
     &     + 2.d0*s12**2*s34**2
     &     )
      f40 = f40 + s134**(-2)*s1234**(-2)*s14**(-1) * (
     &     + 4.d0*s24**2*s34
     &     + 8.d0*s23*s24*s34
     &     + 4.d0*s23**2*s34
     &     + 8.d0*s12*s24*s34
     &     + 8.d0*s12*s23*s34
     &     + 4.d0*s12**2*s34
     &     )
      f40 = f40 + s134**(-2)*s1234**(-2)*s34**(-2) * (
     &     + 2.d0*s14**2*s24**2
     &     + 4.d0*s14**2*s23*s24
     &     + 2.d0*s14**2*s23**2
     &     + 4.d0*s12*s14**2*s24
     &     + 4.d0*s12*s14**2*s23
     &     + 2.d0*s12**2*s14**2
     &     )
      f40 = f40 + s134**(-2)*s1234**(-2)*s34**(-1) * (
     &     + 4.d0*s14*s24**2
     &     + 8.d0*s14*s23*s24
     &     + 4.d0*s14*s23**2
     &     + 8.d0*s12*s14*s24
     &     + 8.d0*s12*s14*s23
     &     + 4.d0*s12**2*s14
     &     )
      f40 = f40 + s134**(-2)*s1234**(-2) * (
     &     + 6.d0*s24**2
     &     + 12.d0*s23*s24
     &     + 6.d0*s23**2
     &     + 12.d0*s12*s24
     &     + 12.d0*s12*s23
     &     + 6.d0*s12**2
     &     )
      f40 = f40 + s134**(-1)*s234**(-1)*s1234**(-2)*s14**(-1)*s23**(-1)
     &  * (
     &     + 2.d0*s34**4
     &     - 8.d0*s12*s34**3
     &     + 12.d0*s12**2*s34**2
     &     - 8.d0*s12**3*s34
     &     + 2.d0*s12**4
     &     )
      f40 = f40 + s134**(-1)*s234**(-1)*s1234**(-2)*s14**(-1) * (
     &     - 4.d0*s24*s34**2
     &     - 2.d0*s24**2*s34
     &     - 2.d0*s24**3
     &     - 4.d0*s12*s34**2
     &     + 4.d0*s12*s24*s34
     &     - 4.d0*s12*s24**2
     &     + 6.d0*s12**2*s34
     &     - 6.d0*s12**2*s24
     &     - 4.d0*s12**3
     &     )
      f40 = f40 + s134**(-1)*s234**(-1)*s1234**(-2)*s23**(-1) * (
     &     + 4.d0*s34**3
     &     + 6.d0*s14*s34**2
     &     + 4.d0*s14**2*s34
     &     + 2.d0*s14**3
     &     - 12.d0*s12*s34**2
     &     - 12.d0*s12*s14*s34
     &     - 4.d0*s12*s14**2
     &     + 12.d0*s12**2*s34
     &     + 6.d0*s12**2*s14
     &     - 4.d0*s12**3
     &     )
      f40 = f40 + s134**(-1)*s234**(-1)*s1234**(-2)*s34**(-2) * (
     &     - 4.d0*s12**2*s14*s24
     &     )
      f40 = f40 + s134**(-1)*s234**(-1)*s1234**(-2)*s34**(-1) * (
     &     - 8.d0*s12*s24**2
     &     - 8.d0*s12*s14*s24
     &     - 8.d0*s12*s14**2
     &     - 4.d0*s12**2*s24
     &     - 8.d0*s12**3
     &     )
      f40 = f40 + s134**(-1)*s234**(-1)*s1234**(-2) * (
     &     - 12.d0*s12*s34
     &     - 12.d0*s12*s24
     &     - 12.d0*s12*s14
     &     + 12.d0*s12**2
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s12**(-1)*s14**(-1) * (
     &     + 4.d0*s24*s34**2
     &     + 6.d0*s24**2*s34
     &     + 4.d0*s24**3
     &     + 4.d0*s23*s34**2
     &     + 4.d0*s23*s24*s34
     &     + 6.d0*s23*s24**2
     &     - 2.d0*s23**2*s34
     &     + 4.d0*s23**2*s24
     &     + 2.d0*s23**3
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + 4.d0*s24**3
     &     + 2.d0*s23*s24**2
     &     - 2.d0*s23**2*s24
     &     - 2.d0*s23**3
     &     + 10.d0*s14*s24**2
     &     + 8.d0*s14*s23*s24
     &     + 4.d0*s14*s23**2
     &     + 6.d0*s14**2*s24
     &     + 2.d0*s14**3
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 4.d0*s34**2
     &     + 6.d0*s24*s34
     &     + 16.d0*s24**2
     &     + 20.d0*s23*s24
     &     + 8.d0*s23**2
     &     + 6.d0*s14*s34
     &     + 8.d0*s14*s24
     &     + 4.d0*s14**2
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s14**(-2) * (
     &     + 4.d0*s24*s34**2
     &     - 4.d0*s24**2*s34
     &     + 4.d0*s23*s34**2
     &     - 8.d0*s23*s24*s34
     &     + 4.d0*s12*s34**2
     &     - 4.d0*s12*s24*s34
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s14**(-1)*s23**(-1) * (
     &     + 8.d0*s24*s34**2
     &     + 8.d0*s24**2*s34
     &     + 6.d0*s24**3
     &     + 8.d0*s12*s34**2
     &     + 10.d0*s12*s24**2
     &     - 8.d0*s12**2*s34
     &     + 10.d0*s12**2*s24
     &     + 6.d0*s12**3
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s14**(-1) * (
     &     - 4.d0*s34**2
     &     + 4.d0*s24*s34
     &     - 6.d0*s24**2
     &     + 14.d0*s23*s34
     &     - 12.d0*s23*s24
     &     - 14.d0*s23**2
     &     + 12.d0*s12*s34
     &     - 8.d0*s12*s24
     &     - 14.d0*s12*s23
     &     - 6.d0*s12**2
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s23**(-1)*s34**(-1) * (
     &     + 4.d0*s24**3
     &     + 6.d0*s14*s24**2
     &     + 4.d0*s14**2*s24
     &     + 6.d0*s12*s24**2
     &     + 4.d0*s12*s14*s24
     &     + 4.d0*s12*s14**2
     &     + 4.d0*s12**2*s24
     &     - 2.d0*s12**2*s14
     &     + 2.d0*s12**3
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s23**(-1) * (
     &     + 12.d0*s24*s34
     &     + 12.d0*s24**2
     &     + 12.d0*s14*s24
     &     + 12.d0*s12*s34
     &     + 8.d0*s12*s24
     &     + 12.d0*s12*s14
     &     - 4.d0*s12**2
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s34**(-2) * (
     &     - 4.d0*s14*s24**2
     &     - 4.d0*s14*s23*s24
     &     + 4.d0*s14**2*s24
     &     + 4.d0*s14**2*s23
     &     - 8.d0*s12*s14*s24
     &     + 4.d0*s12*s14**2
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2)*s34**(-1) * (
     &     - 6.d0*s24**2
     &     - 8.d0*s23*s24
     &     - 6.d0*s23**2
     &     + 8.d0*s14*s24
     &     + 14.d0*s14*s23
     &     - 4.d0*s14**2
     &     - 12.d0*s12*s24
     &     - 14.d0*s12*s23
     &     + 12.d0*s12*s14
     &     - 14.d0*s12**2
     &     )
      f40 = f40 + s134**(-1)*s1234**(-2) * (
     &     - 12.d0*s34
     &     + 8.d0*s24
     &     + 32.d0*s23
     &     - 12.d0*s14
     &     + 28.d0*s12
     &     )
      f40 = f40 + s234**(-2)*s1234**(-2)*s23**(-2) * (
     &     + 2.d0*s14**2*s34**2
     &     + 4.d0*s13*s14*s34**2
     &     + 2.d0*s13**2*s34**2
     &     + 4.d0*s12*s14*s34**2
     &     + 4.d0*s12*s13*s34**2
     &     + 2.d0*s12**2*s34**2
     &     )
      f40 = f40 + s234**(-2)*s1234**(-2)*s23**(-1) * (
     &     + 4.d0*s14**2*s34
     &     + 8.d0*s13*s14*s34
     &     + 4.d0*s13**2*s34
     &     + 8.d0*s12*s14*s34
     &     + 8.d0*s12*s13*s34
     &     + 4.d0*s12**2*s34
     &     )
      f40 = f40 + s234**(-2)*s1234**(-2)*s34**(-2) * (
     &     + 2.d0*s14**2*s24**2
     &     + 4.d0*s13*s14*s24**2
     &     + 2.d0*s13**2*s24**2
     &     + 4.d0*s12*s14*s24**2
     &     + 4.d0*s12*s13*s24**2
     &     + 2.d0*s12**2*s24**2
     &     )
      f40 = f40 + s234**(-2)*s1234**(-2) * (
     &     + 4.d0*s14**2
     &     + 8.d0*s13*s14
     &     + 4.d0*s13**2
     &     + 8.d0*s12*s14
     &     + 8.d0*s12*s13
     &     + 4.d0*s12**2
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s12**(-1)*s23**(-1) * (
     &     + 4.d0*s14*s34**2
     &     - 2.d0*s14**2*s34
     &     + 2.d0*s14**3
     &     + 4.d0*s13*s34**2
     &     + 4.d0*s13*s14*s34
     &     + 4.d0*s13*s14**2
     &     + 6.d0*s13**2*s34
     &     + 6.d0*s13**2*s14
     &     + 4.d0*s13**3
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + 8.d0*s14*s24**2
     &     + 8.d0*s14**2*s24
     &     + 6.d0*s14**3
     &     + 8.d0*s13*s24**2
     &     + 10.d0*s13*s14**2
     &     - 8.d0*s13**2*s24
     &     + 10.d0*s13**2*s14
     &     + 6.d0*s13**3
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 8.d0*s14*s34
     &     + 4.d0*s14*s24
     &     + 4.d0*s14**2
     &     + 8.d0*s13*s34
     &     + 4.d0*s13*s24
     &     + 8.d0*s13*s14
     &     + 4.d0*s13**2
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s14**(-1)*s23**(-1) * (
     &     + 8.d0*s13*s34**2
     &     + 8.d0*s13**2*s34
     &     + 6.d0*s13**3
     &     + 8.d0*s12*s34**2
     &     + 10.d0*s12*s13**2
     &     - 8.d0*s12**2*s34
     &     + 10.d0*s12**2*s13
     &     + 6.d0*s12**3
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s14**(-1)*s34**(-1) * (
     &     + 4.d0*s13*s24**2
     &     - 6.d0*s13**2*s24
     &     + 4.d0*s13**3
     &     + 4.d0*s12*s24**2
     &     - 4.d0*s12*s13*s24
     &     + 6.d0*s12*s13**2
     &     + 2.d0*s12**2*s24
     &     + 4.d0*s12**2*s13
     &     + 2.d0*s12**3
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s14**(-1) * (
     &     + 4.d0*s13*s34
     &     - 4.d0*s13*s24
     &     + 6.d0*s13**2
     &     + 4.d0*s12*s34
     &     - 4.d0*s12*s24
     &     + 4.d0*s12*s13
     &     - 2.d0*s12**2
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s23**(-2) * (
     &     + 4.d0*s14*s34**2
     &     + 4.d0*s13*s34**2
     &     - 8.d0*s13*s14*s34
     &     - 4.d0*s13**2*s34
     &     + 4.d0*s12*s34**2
     &     - 4.d0*s12*s13*s34
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s23**(-1) * (
     &     - 8.d0*s34**2
     &     + 12.d0*s14*s34
     &     - 16.d0*s14**2
     &     + 4.d0*s13*s34
     &     - 10.d0*s13*s14
     &     - 8.d0*s13**2
     &     + 20.d0*s12*s34
     &     - 10.d0*s12*s14
     &     - 12.d0*s12*s13
     &     - 12.d0*s12**2
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s34**(-2) * (
     &     + 4.d0*s14*s24**2
     &     - 4.d0*s14**2*s24
     &     + 4.d0*s13*s24**2
     &     - 4.d0*s13*s14*s24
     &     + 4.d0*s12*s24**2
     &     - 8.d0*s12*s14*s24
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2)*s34**(-1) * (
     &     - 4.d0*s24**2
     &     - 6.d0*s14*s24
     &     - 6.d0*s14**2
     &     - 4.d0*s13*s14
     &     - 2.d0*s13**2
     &     + 4.d0*s12*s24
     &     - 6.d0*s12*s14
     &     - 12.d0*s12*s13
     &     - 14.d0*s12**2
     &     )
      f40 = f40 + s234**(-1)*s1234**(-2) * (
     &     - 4.d0*s34
     &     + 4.d0*s24
     &     + 22.d0*s14
     &     + 4.d0*s13
     &     + 24.d0*s12
     &     )
      f40 = f40 + s1234**(-2)*s12**(-2) * (
     &     + 2.d0*s24**2
     &     - 8.d0*s23*s24
     &     + 2.d0*s23**2
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1)*s14**(-1)*s23**(-1)*s34**(-1)
     &  * (
     &     + 2.d0*s24**4
     &     + 4.d0*s13*s24**3
     &     + 6.d0*s13**2*s24**2
     &     + 4.d0*s13**3*s24
     &     + 2.d0*s13**4
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1)*s14**(-1)*s23**(-1) * (
     &     + 2.d0*s34**3
     &     + 4.d0*s24*s34**2
     &     + 6.d0*s24**2*s34
     &     + 4.d0*s24**3
     &     + 4.d0*s13*s34**2
     &     + 12.d0*s13*s24*s34
     &     + 12.d0*s13*s24**2
     &     + 6.d0*s13**2*s34
     &     + 12.d0*s13**2*s24
     &     + 4.d0*s13**3
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1)*s14**(-1)*s34**(-1) * (
     &     + 4.d0*s24**3
     &     + 6.d0*s23*s24**2
     &     + 4.d0*s23**2*s24
     &     + 2.d0*s23**3
     &     + 12.d0*s13*s24**2
     &     + 12.d0*s13*s23*s24
     &     + 4.d0*s13*s23**2
     &     + 12.d0*s13**2*s24
     &     + 6.d0*s13**2*s23
     &     + 4.d0*s13**3
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1)*s14**(-1) * (
     &     + 12.d0*s34**2
     &     + 20.d0*s24*s34
     &     + 18.d0*s24**2
     &     + 6.d0*s23*s34
     &     + 20.d0*s23*s24
     &     + 12.d0*s23**2
     &     + 16.d0*s13*s34
     &     + 28.d0*s13*s24
     &     + 16.d0*s13*s23
     &     + 16.d0*s13**2
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1)*s23**(-1)*s34**(-1) * (
     &     + 4.d0*s24**3
     &     + 6.d0*s14*s24**2
     &     + 4.d0*s14**2*s24
     &     + 2.d0*s14**3
     &     + 12.d0*s13*s24**2
     &     + 12.d0*s13*s14*s24
     &     + 4.d0*s13*s14**2
     &     + 12.d0*s13**2*s24
     &     + 6.d0*s13**2*s14
     &     + 4.d0*s13**3
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1)*s23**(-1) * (
     &     + 8.d0*s34**2
     &     + 14.d0*s24*s34
     &     + 14.d0*s24**2
     &     + 8.d0*s14*s34
     &     + 18.d0*s14*s24
     &     + 10.d0*s14**2
     &     + 20.d0*s13*s34
     &     + 28.d0*s13*s24
     &     + 20.d0*s13*s14
     &     + 18.d0*s13**2
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + 12.d0*s24**2
     &     + 8.d0*s23*s24
     &     + 2.d0*s23**2
     &     + 8.d0*s14*s24
     &     + 4.d0*s14*s23
     &     + 2.d0*s14**2
     &     + 16.d0*s13*s24
     &     + 14.d0*s13*s23
     &     + 14.d0*s13*s14
     &     + 18.d0*s13**2
     &     )
      f40 = f40 + s1234**(-2)*s12**(-1) * (
     &     - 8.d0*s34
     &     + 22.d0*s24
     &     + 14.d0*s23
     &     - 4.d0*s14
     &     + 14.d0*s13
     &     )
      f40 = f40 + s1234**(-2)*s14**(-2) * (
     &     + 2.d0*s34**2
     &     - 8.d0*s24*s34
     &     + 2.d0*s24**2
     &     )
      f40 = f40 + s1234**(-2)*s14**(-1)*s23**(-1)*s34**(-1) * (
     &     + 4.d0*s24**3
     &     + 12.d0*s13*s24**2
     &     + 12.d0*s13**2*s24
     &     + 4.d0*s13**3
     &     + 6.d0*s12*s24**2
     &     + 12.d0*s12*s13*s24
     &     + 6.d0*s12*s13**2
     &     + 4.d0*s12**2*s24
     &     + 4.d0*s12**2*s13
     &     + 2.d0*s12**3
     &     )
      f40 = f40 + s1234**(-2)*s14**(-1)*s23**(-1) * (
     &     + 4.d0*s34**2
     &     + 8.d0*s24*s34
     &     + 10.d0*s24**2
     &     + 8.d0*s13*s34
     &     + 26.d0*s13*s24
     &     + 10.d0*s13**2
     &     - 6.d0*s12*s34
     &     + 14.d0*s12*s24
     &     + 14.d0*s12*s13
     &     + 10.d0*s12**2
     &     )
      f40 = f40 + s1234**(-2)*s14**(-1)*s34**(-1) * (
     &     + 14.d0*s24**2
     &     + 14.d0*s23*s24
     &     + 8.d0*s23**2
     &     + 24.d0*s13*s24
     &     + 24.d0*s13*s23
     &     + 24.d0*s13**2
     &     + 14.d0*s12*s24
     &     + 12.d0*s12*s23
     &     + 24.d0*s12*s13
     &     + 8.d0*s12**2
     &     )
      f40 = f40 + s1234**(-2)*s14**(-1) * (
     &     + 14.d0*s34
     &     + 20.d0*s24
     &     - 8.d0*s23
     &     + 18.d0*s13
     &     )
      f40 = f40 + s1234**(-2)*s23**(-2) * (
     &     + 2.d0*s34**2
     &     - 8.d0*s13*s34
     &     + 2.d0*s13**2
     &     )
      f40 = f40 + s1234**(-2)*s23**(-1)*s34**(-1) * (
     &     + 18.d0*s24**2
     &     + 20.d0*s14*s24
     &     + 8.d0*s14**2
     &     + 28.d0*s13*s24
     &     + 14.d0*s13*s14
     &     + 14.d0*s13**2
     &     + 20.d0*s12*s24
     &     + 8.d0*s12*s14
     &     + 18.d0*s12*s13
     &     + 10.d0*s12**2
     &     )
      f40 = f40 + s1234**(-2)*s23**(-1) * (
     &     + 14.d0*s34
     &     + 10.d0*s24
     &     - 8.d0*s14
     &     + 20.d0*s13
     &     - 8.d0*s12
     &     )
      f40 = f40 + s1234**(-2)*s34**(-2) * (
     &     + 2.d0*s24**2
     &     - 8.d0*s14*s24
     &     + 2.d0*s14**2
     &     )
      f40 = f40 + s1234**(-2)*s34**(-1) * (
     &     + 18.d0*s24
     &     + 14.d0*s14
     &     + 18.d0*s13
     &     - 8.d0*s12
     &     )
      f40 = f40 + s1234**(-2) * (
     &     + 42.d0
     &     )

      f40 = f40 + 2d0*s1234**(-2)*s12**(-2)*s34**(-2) * (
     &    (s14*s23-s13*s24)**2)
      f40 = f40 + 2d0*s1234**(-2)*s14**(-2)*s23**(-2) * (
     &    (s13*s24-s12*s34)**2)


      F40=f40
      
      return
      end
      
      
      
      
      function G40(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
      
      s123=s12+s13+s23
      s124=s12+s14+s24
      s134=s13+s14+s34
      s234=s23+s24+s34

      s1234=s12+s13+s14+s23+s24+s34

      g40 =  + s134**(-2)*s1234**(-2)*s13**(-1) * (
     &     - 2.d0*s24**2*s34
     &     - 4.d0*s23*s24*s34
     &     - 2.d0*s23**2*s34
     &     - 4.d0*s12*s24*s34
     &     - 4.d0*s12*s23*s34
     &     - 2.d0*s12**2*s34
     &     )
      g40 = g40 + s134**(-2)*s1234**(-2)*s34**(-2) * (
     &     - 2.d0*s14**2*s24**2
     &     - 4.d0*s14**2*s23*s24
     &     - 2.d0*s14**2*s23**2
     &     - 2.d0*s13**2*s24**2
     &     - 4.d0*s13**2*s23*s24
     &     - 2.d0*s13**2*s23**2
     &     - 4.d0*s12*s14**2*s24
     &     - 4.d0*s12*s14**2*s23
     &     - 4.d0*s12*s13**2*s24
     &     - 4.d0*s12*s13**2*s23
     &     - 2.d0*s12**2*s14**2
     &     - 2.d0*s12**2*s13**2
     &     )
      g40 = g40 + s134**(-2)*s1234**(-2)*s34**(-1) * (
     &     - 4.d0*s13*s24**2
     &     - 8.d0*s13*s23*s24
     &     - 4.d0*s13*s23**2
     &     - 8.d0*s12*s13*s24
     &     - 8.d0*s12*s13*s23
     &     - 4.d0*s12**2*s13
     &     )
      g40 = g40 + s134**(-2)*s1234**(-2) * (
     &     - 4.d0*s24**2
     &     - 8.d0*s23*s24
     &     - 4.d0*s23**2
     &     - 8.d0*s12*s24
     &     - 8.d0*s12*s23
     &     - 4.d0*s12**2
     &     )
      g40 = g40 + s134**(-1)*s234**(-1)*s1234**(-2)*s13**(-1) * (
     &     - s34**3
     &     - 3.d0*s24*s34**2
     &     - 4.d0*s24**2*s34
     &     - 2.d0*s24**3
     &     + s23*s34**2
     &     + 2.d0*s23**2*s34
     &     + 2.d0*s23**3
     &     + 4.d0*s12*s34**2
     &     + 6.d0*s12*s24*s34
     &     + 4.d0*s12*s24**2
     &     + 2.d0*s12*s23*s34
     &     + 4.d0*s12*s23**2
     &     - 3.d0*s12**2*s34
     &     - 3.d0*s12**2*s24
     &     )
      g40 = g40 + s134**(-1)*s234**(-1)*s1234**(-2)*s13**(-1) * (
     &     + 3.d0*s12**2*s23
     &     + 2.d0*s12**3
     &     )
      g40 = g40 + s134**(-1)*s234**(-1)*s1234**(-2)*s24**(-1) * (
     &     - s34**3
     &     + s14*s34**2
     &     + 2.d0*s14**2*s34
     &     + 2.d0*s14**3
     &     - 3.d0*s13*s34**2
     &     - 4.d0*s13**2*s34
     &     - 2.d0*s13**3
     &     + 4.d0*s12*s34**2
     &     + 2.d0*s12*s14*s34
     &     + 4.d0*s12*s14**2
     &     + 6.d0*s12*s13*s34
     &     + 4.d0*s12*s13**2
     &     - 3.d0*s12**2*s34
     &     + 3.d0*s12**2*s14
     &     )
      g40 = g40 + s134**(-1)*s234**(-1)*s1234**(-2)*s24**(-1) * (
     &     - 3.d0*s12**2*s13
     &     + 2.d0*s12**3
     &     )
      g40 = g40 + s134**(-1)*s234**(-1)*s1234**(-2)*s34**(-2) * (
     &     + 4.d0*s12**2*s14*s24
     &     + 4.d0*s12**2*s13*s23
     &     )
      g40 = g40 + s134**(-1)*s234**(-1)*s1234**(-2)*s34**(-1) * (
     &     + 8.d0*s12*s24**2
     &     + 8.d0*s12*s23**2
     &     + 8.d0*s12*s14*s24
     &     + 8.d0*s12*s14**2
     &     + 8.d0*s12*s13*s23
     &     + 8.d0*s12*s13**2
     &     + 4.d0*s12**2*s23
     &     + 4.d0*s12**2*s14
     &     + 4.d0*s12**3
     &     )
      g40 = g40 + s134**(-1)*s234**(-1)*s1234**(-2) * (
     &     + 12.d0*s12*s34
     &     + 12.d0*s12*s24
     &     + 12.d0*s12*s23
     &     + 12.d0*s12*s14
     &     + 12.d0*s12*s13
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s12**(-1)*s13**(-1) * (
     &     + 2.d0*s23*s34**2
     &     - 4.d0*s23*s24*s34
     &     + 2.d0*s23*s24**2
     &     + 2.d0*s23**3
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + 2.d0*s24**3
     &     + 2.d0*s23*s24**2
     &     + 2.d0*s23**2*s24
     &     + 2.d0*s23**3
     &     + 2.d0*s14*s24**2
     &     - 2.d0*s14*s23**2
     &     + 2.d0*s14**2*s24
     &     + 2.d0*s14**2*s23
     &     - 2.d0*s13*s24**2
     &     + 2.d0*s13*s23**2
     &     + 2.d0*s13**2*s24
     &     + 2.d0*s13**2*s23
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 2.d0*s24*s34
     &     - 2.d0*s24**2
     &     + 4.d0*s23*s34
     &     - 8.d0*s23*s24
     &     + 2.d0*s23**2
     &     + 2.d0*s14*s24
     &     + 2.d0*s13*s24
     &     + 4.d0*s13*s23
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s13**(-1) * (
     &     + 3.d0*s34**2
     &     - 2.d0*s24*s34
     &     + 2.d0*s24**2
     &     - 4.d0*s23*s34
     &     + 2.d0*s23*s24
     &     + 10.d0*s23**2
     &     - 6.d0*s12*s34
     &     - 4.d0*s12*s24
     &     + 12.d0*s12*s23
     &     + 5.d0*s12**2
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s24**(-1)*s34**(-1) * (
     &     - 2.d0*s14**3
     &     + 2.d0*s13**3
     &     - 2.d0*s12*s14**2
     &     - 2.d0*s12*s13**2
     &     - s12**2*s14
     &     + s12**2*s13
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s24**(-1) * (
     &     + s34**2
     &     - s14*s34
     &     - 2.d0*s14**2
     &     + 3.d0*s13*s34
     &     + 4.d0*s13**2
     &     - 2.d0*s12*s34
     &     - 4.d0*s12*s13
     &     + s12**2
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s34**(-2) * (
     &     + 4.d0*s14*s24**2
     &     + 4.d0*s14*s23*s24
     &     - 4.d0*s14**2*s24
     &     - 4.d0*s14**2*s23
     &     + 4.d0*s13*s23*s24
     &     + 4.d0*s13*s23**2
     &     - 4.d0*s13**2*s24
     &     - 4.d0*s13**2*s23
     &     + 8.d0*s12*s14*s24
     &     - 4.d0*s12*s14**2
     &     + 8.d0*s12*s13*s23
     &     - 4.d0*s12*s13**2
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2)*s34**(-1) * (
     &     + 8.d0*s24**2
     &     + 4.d0*s23*s24
     &     + 16.d0*s23**2
     &     + 6.d0*s14*s24
     &     - 8.d0*s14*s23
     &     + 6.d0*s14**2
     &     - 14.d0*s13*s24
     &     + 6.d0*s13**2
     &     + 4.d0*s12*s24
     &     + 16.d0*s12*s23
     &     - 4.d0*s12*s14
     &     - 12.d0*s12*s13
     &     + 10.d0*s12**2
     &     )
      g40 = g40 + s134**(-1)*s1234**(-2) * (
     &     + 8.d0*s34
     &     - 14.d0*s24
     &     - 4.d0*s23
     &     + 4.d0*s14
     &     + 8.d0*s13
     &     - 16.d0*s12
     &     )
      g40 = g40 + s234**(-2)*s1234**(-2)*s24**(-1) * (
     &     - 2.d0*s14**2*s34
     &     - 4.d0*s13*s14*s34
     &     - 2.d0*s13**2*s34
     &     - 4.d0*s12*s14*s34
     &     - 4.d0*s12*s13*s34
     &     - 2.d0*s12**2*s34
     &     )
      g40 = g40 + s234**(-2)*s1234**(-2)*s34**(-2) * (
     &     - 2.d0*s14**2*s24**2
     &     - 2.d0*s14**2*s23**2
     &     - 4.d0*s13*s14*s24**2
     &     - 4.d0*s13*s14*s23**2
     &     - 2.d0*s13**2*s24**2
     &     - 2.d0*s13**2*s23**2
     &     - 4.d0*s12*s14*s24**2
     &     - 4.d0*s12*s14*s23**2
     &     - 4.d0*s12*s13*s24**2
     &     - 4.d0*s12*s13*s23**2
     &     - 2.d0*s12**2*s24**2
     &     - 2.d0*s12**2*s23**2
     &     )
      g40 = g40 + s234**(-2)*s1234**(-2)*s34**(-1) * (
     &     - 4.d0*s14**2*s24
     &     - 8.d0*s13*s14*s24
     &     - 4.d0*s13**2*s24
     &     - 8.d0*s12*s14*s24
     &     - 8.d0*s12*s13*s24
     &     - 4.d0*s12**2*s24
     &     )
      g40 = g40 + s234**(-2)*s1234**(-2) * (
     &     - 4.d0*s14**2
     &     - 8.d0*s13*s14
     &     - 4.d0*s13**2
     &     - 8.d0*s12*s14
     &     - 8.d0*s12*s13
     &     - 4.d0*s12**2
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s12**(-1)*s24**(-1) * (
     &     + 2.d0*s14*s34**2
     &     + 2.d0*s14**3
     &     - 4.d0*s13*s14*s34
     &     + 2.d0*s13**2*s14
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + 2.d0*s14*s24**2
     &     + 2.d0*s14*s23**2
     &     + 2.d0*s14**2*s24
     &     - 2.d0*s14**2*s23
     &     + 2.d0*s14**3
     &     + 2.d0*s13*s24**2
     &     + 2.d0*s13*s23**2
     &     + 2.d0*s13*s14**2
     &     - 2.d0*s13**2*s24
     &     + 2.d0*s13**2*s23
     &     + 2.d0*s13**2*s14
     &     + 2.d0*s13**3
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s12**(-1) * (
     &     + 4.d0*s14*s34
     &     + 4.d0*s14*s24
     &     + 2.d0*s14**2
     &     + 2.d0*s13*s34
     &     + 2.d0*s13*s24
     &     + 2.d0*s13*s23
     &     - 8.d0*s13*s14
     &     - 2.d0*s13**2
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s13**(-1)*s34**(-1) * (
     &     + 2.d0*s24**3
     &     - 2.d0*s23**3
     &     - 2.d0*s12*s24**2
     &     - 2.d0*s12*s23**2
     &     + s12**2*s24
     &     - s12**2*s23
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s13**(-1) * (
     &     + s34**2
     &     + 3.d0*s24*s34
     &     + 4.d0*s24**2
     &     - s23*s34
     &     - 2.d0*s23**2
     &     - 2.d0*s12*s34
     &     - 4.d0*s12*s24
     &     + s12**2
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s24**(-1) * (
     &     + 3.d0*s34**2
     &     - 4.d0*s14*s34
     &     + 10.d0*s14**2
     &     - 2.d0*s13*s34
     &     + 2.d0*s13*s14
     &     + 2.d0*s13**2
     &     - 6.d0*s12*s34
     &     + 12.d0*s12*s14
     &     - 4.d0*s12*s13
     &     + 5.d0*s12**2
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s34**(-2) * (
     &     - 4.d0*s14*s24**2
     &     - 4.d0*s14*s23**2
     &     + 4.d0*s14**2*s24
     &     - 4.d0*s13*s24**2
     &     - 4.d0*s13*s23**2
     &     + 4.d0*s13*s14*s24
     &     + 4.d0*s13*s14*s23
     &     + 4.d0*s13**2*s23
     &     - 4.d0*s12*s24**2
     &     - 4.d0*s12*s23**2
     &     + 8.d0*s12*s14*s24
     &     + 8.d0*s12*s13*s23
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2)*s34**(-1) * (
     &     + 6.d0*s24**2
     &     + 6.d0*s23**2
     &     - 8.d0*s14*s23
     &     + 16.d0*s14**2
     &     - 14.d0*s13*s24
     &     + 6.d0*s13*s23
     &     + 4.d0*s13*s14
     &     + 8.d0*s13**2
     &     - 12.d0*s12*s24
     &     - 4.d0*s12*s23
     &     + 16.d0*s12*s14
     &     + 4.d0*s12*s13
     &     + 10.d0*s12**2
     &     )
      g40 = g40 + s234**(-1)*s1234**(-2) * (
     &     + 8.d0*s34
     &     + 8.d0*s24
     &     + 4.d0*s23
     &     - 4.d0*s14
     &     - 14.d0*s13
     &     - 16.d0*s12
     &     )
      g40 = g40 + s1234**(-2)*s12**(-1)*s13**(-1)*s34**(-1) * (
     &     + 2.d0*s23*s24**2
     &     + 2.d0*s23**3
     &     )
      g40 = g40 + s1234**(-2)*s12**(-1)*s13**(-1) * (
     &     - 2.d0*s23*s34
     &     + 4.d0*s23*s24
     &     + 2.d0*s14*s23
     &     )
      g40 = g40 + s1234**(-2)*s12**(-1)*s24**(-1)*s34**(-1) * (
     &     + 2.d0*s14**3
     &     + 2.d0*s13**2*s14
     &     )
      g40 = g40 + s1234**(-2)*s12**(-1)*s24**(-1) * (
     &     - 2.d0*s14*s34
     &     + 2.d0*s14*s23
     &     + 4.d0*s13*s14
     &     )
      g40 = g40 + s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + 6.d0*s24**2
     &     + 4.d0*s23*s24
     &     + 6.d0*s23**2
     &     + 8.d0*s14*s24
     &     + 6.d0*s14**2
     &     + 8.d0*s13*s24
     &     + 8.d0*s13*s23
     &     + 4.d0*s13*s14
     &     + 6.d0*s13**2
     &     )
      g40 = g40 + s1234**(-2)*s12**(-1) * (
     &     - 2.d0*s24
     &     - 2.d0*s23
     &     - 2.d0*s14
     &     - 2.d0*s13
     &     )
      g40 = g40 + s1234**(-2)*s13**(-1)*s24**(-1) * (
     &     - 2.d0*s14*s23
     &     + 2.d0*s12*s34
     &     )
      g40 = g40 + s1234**(-2)*s13**(-1)*s34**(-1) * (
     &     - 2.d0*s24**2
     &     + 2.d0*s23*s24
     &     - 2.d0*s23**2
     &     + 2.d0*s12*s24
     &     - 2.d0*s12*s23
     &     - s12**2
     &     )
      g40 = g40 + s1234**(-2)*s13**(-1) * (
     &     - 3.d0*s34
     &     - 2.d0*s24
     &     + 4.d0*s23
     &     + 2.d0*s12
     &     )
      g40 = g40 + s1234**(-2)*s24**(-1)*s34**(-1) * (
     &     - 2.d0*s14**2
     &     + 2.d0*s13*s14
     &     - 2.d0*s13**2
     &     - 2.d0*s12*s14
     &     + 2.d0*s12*s13
     &     - s12**2
     &     )
      g40 = g40 + s1234**(-2)*s24**(-1) * (
     &     - 3.d0*s34
     &     + 4.d0*s14
     &     - 2.d0*s13
     &     + 2.d0*s12
     &     )
      g40 = g40 + s1234**(-2)*s34**(-2) * (
     &     - 2.d0*s24**2
     &     - 2.d0*s23**2
     &     + 8.d0*s14*s24
     &     - 2.d0*s14**2
     &     + 8.d0*s13*s23
     &     - 2.d0*s13**2
     &     )
      g40 = g40 + s1234**(-2)*s34**(-1) * (
     &     + 8.d0*s24
     &     + 14.d0*s23
     &     + 14.d0*s14
     &     + 8.d0*s13
     &     + 24.d0*s12
     &     )
      g40 = g40 + s1234**(-2) * (
     &     - 18.d0
     &     )
      g40 = g40 - 4d0*(s13*s24-s14*s23)**2/s12**2/s34**2/s1234**2

      G40 = g40/2d0

      return
      end
      
      
      
      
      function G40tilde(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
      
      s123=s12+s13+s23
      s124=s12+s14+s24
      s134=s13+s14+s34
      s234=s23+s24+s34

      s1234=s12+s13+s14+s23+s24+s34

      g40t =  + s134**(-2)*s1234**(-2)*s13**(-1) * (
     &     - s24**2*s34
     &     - 2.d0*s23*s24*s34
     &     - s23**2*s34
     &     - 2.d0*s12*s24*s34
     &     - 2.d0*s12*s23*s34
     &     - s12**2*s34
     &     )
      g40t = g40t + s134**(-2)*s1234**(-2)*s14**(-1) * (
     &     - s24**2*s34
     &     - 2.d0*s23*s24*s34
     &     - s23**2*s34
     &     - 2.d0*s12*s24*s34
     &     - 2.d0*s12*s23*s34
     &     - s12**2*s34
     &     )
      g40t = g40t + s134**(-2)*s1234**(-2) * (
     &     - 2.d0*s24**2
     &     - 4.d0*s23*s24
     &     - 2.d0*s23**2
     &     - 4.d0*s12*s24
     &     - 4.d0*s12*s23
     &     - 2.d0*s12**2
     &     )
      g40t = g40t + s134**(-1)*s234**(-1)*s1234**(-2)*s13**(-1)*
     & s23**(-1) * (
     &     - s12*s34**3
     &     - s12**3*s34
     &     )
      g40t = g40t + s134**(-1)*s234**(-1)*s1234**(-2)*s13**(-1) * (
     &     - s34**3
     &     - 2.d0*s24*s34**2
     &     - 2.d0*s24**2*s34
     &     + 2.d0*s12*s34**2
     &     + 4.d0*s12*s24*s34
     &     - 3.d0*s12**2*s34
     &     )
      g40t = g40t + s134**(-1)*s234**(-1)*s1234**(-2)*s14**(-1)*
     & s24**(-1) * (
     &     - s12*s34**3
     &     - s12**3*s34
     &     )
      g40t = g40t + s134**(-1)*s234**(-1)*s1234**(-2)*s14**(-1) * (
     &     - s34**3
     &     - 2.d0*s24*s34**2
     &     - 2.d0*s24**2*s34
     &     - 2.d0*s12*s34**2
     &     - 4.d0*s12*s24*s34
     &     - 3.d0*s12**2*s34
     &     )
      g40t = g40t + s134**(-1)*s234**(-1)*s1234**(-2)*s23**(-1) * (
     &     - s34**3
     &     - 2.d0*s14*s34**2
     &     - 2.d0*s14**2*s34
     &     + 2.d0*s12*s34**2
     &     + 4.d0*s12*s14*s34
     &     - 3.d0*s12**2*s34
     &     )
      g40t = g40t + s134**(-1)*s234**(-1)*s1234**(-2)*s24**(-1) * (
     &     - s34**3
     &     - 2.d0*s14*s34**2
     &     - 2.d0*s14**2*s34
     &     - 2.d0*s12*s34**2
     &     - 4.d0*s12*s14*s34
     &     - 3.d0*s12**2*s34
     &     )
      g40t = g40t + s134**(-1)*s234**(-1)*s1234**(-2) * (
     &     - 8.d0*s12*s34
     &     - 4.d0*s12**2
     &     )
      g40t = g40t + s134**(-1)*s1234**(-2)*s13**(-1) * (
     &     + 2.d0*s24*s34
     &     - s24**2
     &     - 2.d0*s23*s34
     &     + s23**2
     &     - 4.d0*s12*s34
     &     - 2.d0*s12*s24
     &     - s12**2
     &     )
      g40t = g40t + s134**(-1)*s1234**(-2)*s14**(-1) * (
     &     + s24**2
     &     - s23**2
     &     - 2.d0*s12*s23
     &     - s12**2
     &     )
      g40t = g40t + s134**(-1)*s1234**(-2)*s23**(-1) * (
     &     + s34**2
     &     + 2.d0*s14*s34
     &     + 2.d0*s14**2
     &     - 2.d0*s12*s34
     &     - 2.d0*s12*s14
     &     + s12**2
     &     )
      g40t = g40t + s134**(-1)*s1234**(-2)*s24**(-1) * (
     &     + s34**2
     &     + 2.d0*s14*s34
     &     + 2.d0*s14**2
     &     + 2.d0*s12*s14
     &     + s12**2
     &     )
      g40t = g40t + s134**(-1)*s1234**(-2) * (
     &     - 2.d0*s34
     &     - 2.d0*s24
     &     - 2.d0*s23
     &     - 4.d0*s12
     &     )
      g40t = g40t + s234**(-2)*s1234**(-2)*s23**(-1) * (
     &     - s14**2*s34
     &     - 2.d0*s13*s14*s34
     &     - s13**2*s34
     &     - 2.d0*s12*s14*s34
     &     - 2.d0*s12*s13*s34
     &     - s12**2*s34
     &     )
      g40t = g40t + s234**(-2)*s1234**(-2)*s24**(-1) * (
     &     - s14**2*s34
     &     - 2.d0*s13*s14*s34
     &     - s13**2*s34
     &     - 2.d0*s12*s14*s34
     &     - 2.d0*s12*s13*s34
     &     - s12**2*s34
     &     )
      g40t = g40t + s234**(-2)*s1234**(-2) * (
     &     - 2.d0*s14**2
     &     - 4.d0*s13*s14
     &     - 2.d0*s13**2
     &     - 4.d0*s12*s14
     &     - 4.d0*s12*s13
     &     - 2.d0*s12**2
     &     )
      g40t = g40t + s234**(-1)*s1234**(-2)*s13**(-1) * (
     &     + s34**2
     &     + 2.d0*s24*s34
     &     + 2.d0*s24**2
     &     - 2.d0*s12*s34
     &     - 2.d0*s12*s24
     &     + s12**2
     &     )
      g40t = g40t + s234**(-1)*s1234**(-2)*s14**(-1) * (
     &     + s34**2
     &     + 2.d0*s24*s34
     &     + 2.d0*s24**2
     &     + 2.d0*s12*s24
     &     + s12**2
     &     )
      g40t = g40t + s234**(-1)*s1234**(-2)*s23**(-1) * (
     &     + 2.d0*s14*s34
     &     - s14**2
     &     - 2.d0*s13*s34
     &     + s13**2
     &     - 4.d0*s12*s34
     &     - 2.d0*s12*s14
     &     - s12**2
     &     )
      g40t = g40t + s234**(-1)*s1234**(-2)*s24**(-1) * (
     &     + s14**2
     &     - s13**2
     &     - 2.d0*s12*s13
     &     - s12**2
     &     )
      g40t = g40t + s234**(-1)*s1234**(-2) * (
     &     - 2.d0*s34
     &     - 2.d0*s14
     &     - 2.d0*s13
     &     - 4.d0*s12
     &     )
      g40t = g40t + s1234**(-2)*s13**(-1)*s14**(-1) * (
     &     + 2.d0*s24**2
     &     + 2.d0*s23**2
     &     + 2.d0*s12*s24
     &     + 2.d0*s12*s23
     &     + 2.d0*s12**2
     &     )
      g40t = g40t + s1234**(-2)*s13**(-1)*s24**(-1) * (
     &     - s14*s23
     &     + s12*s34
     &     )
      g40t = g40t + s1234**(-2)*s13**(-1) * (
     &     - 2.d0*s24
     &     + 2.d0*s23
     &     + 2.d0*s12
     &     )
      g40t = g40t + s1234**(-2)*s14**(-1)*s23**(-1) * (
     &     - s13*s24
     &     + s12*s34
     &     )
      g40t = g40t + s1234**(-2)*s23**(-1)*s24**(-1) * (
     &     + 2.d0*s14**2
     &     + 2.d0*s13**2
     &     + 2.d0*s12*s14
     &     + 2.d0*s12*s13
     &     + 2.d0*s12**2
     &     )
      g40t = g40t + s1234**(-2)*s23**(-1) * (
     &     - 2.d0*s14
     &     + 2.d0*s13
     &     + 2.d0*s12
     &     )
      g40t = g40t + s1234**(-2) * (
     &     - 2.d0
     &     )

      G40tilde = g40t
      
      return
      end
      
      
      
      
      function H40(s12,s13,s14,s23,s24,s34)
      implicit real*8(a-h,o-z)
      
      s123=s12+s13+s23
      s124=s12+s14+s24
      s134=s13+s14+s34
      s234=s23+s24+s34

      s1234=s12+s13+s14+s23+s24+s34

      h40 =  + s1234**(-2)*s12**(-1)*s34**(-1) * (
     &     + s24**2
     &     + s23**2
     &     - 2.d0*s14*s23
     &     + s14**2
     &     - 2.d0*s13*s24
     &     + s13**2
     &     )
      h40 = h40 + s1234**(-2) * (
     &     + 2.d0
     &     )

      h40 =  h40 + 2d0*((s14*s23-s13*s24)/(s12*s34))**(2)/s1234**(2)

      H40 = h40      
      
      return
      end  


c -----------------------------------------------------------
c momentum maps
c -----------------------------------------------------------


      subroutine pmap4to3(i1,i2,i3,i4,j1,j2,j3)
      implicit real*8(a-h,o-z)
      common /yij4/y(4,4)
      common /s3/s12,s13,s23
      common /pmom/p(4,5) 
      common /pcut/ppar(4,5) 
      common/mapmomenta/p5(1:4,1:5),p4(1:4,1:4),p3(1:4,1:3)
      dimension s(3,3)
      y12=y(i1,i2)
      y13=y(i1,i3)
      y23=y(i2,i3)

      do i=1,4
         p4(i,1) = p(i,i1)
         p4(i,2) = p(i,i2)
         p4(i,3) = p(i,i3)
         p4(i,4) = p(i,i4)
      enddo

      call DAK(y12,y23,y13,a,b,c)

      s(j1,j2)=        y(i1,i2)        +y(i1,i3)        +y(i2,i3)
      s(j1,j3)=      a*y(i1,i4)      +b*y(i2,i4)      +c*y(i3,i4)
      s(j2,j3)=(1d0-a)*y(i1,i4)+(1d0-b)*y(i2,i4)+(1d0-c)*y(i3,i4)

      s(j2,j1)=s(j1,j2)
      s(j3,j1)=s(j1,j3)
      s(j3,j2)=s(j2,j3)

      do i=1,4
        ppar(i,j1)=      a*p(i,i1)      +b*p(i,i2)      +c*p(i,i3)
        ppar(i,j2)=(1d0-a)*p(i,i1)+(1d0-b)*p(i,i2)+(1d0-c)*p(i,i3)
        ppar(i,j3)=p(i,i4)
        p3(i,1) = ppar(i,j1)
        p3(i,2) = ppar(i,j2)
        p3(i,3) = ppar(i,j3)
      enddo

      s12=s(1,2)
      s13=s(1,3)
      s23=s(2,3)

      return
      end
*
************************************************************************
*
      subroutine DAK(yau,yub,yab,x,y,z)
      implicit real*8(a-h,o-z)
      y=yub/(yau+yub)
      yaub=yau+yub+yab
      rho=yaub*yab+4d0*y*(1d0-y)*yau*yub 
      rho=sqrt(rho/yaub/yab)
      x=(1d0+rho+yub*(1d0+rho-2d0*y)/(yau+yab))/2d0
      z=(1d0-rho+yau*(1d0-rho-2d0*y)/(yub+yab))/2d0
      return
      end

       
c---------------------------------------------------------
c subtraction terms
c---------------------------------------------------------


c NF^2
      function H40ffs(i1,i2,i3,i4,wtplot)
      implicit double precision(a-h,o-z)
      common /s3/s12,s13,s23
      common /yij4/y(4,4)
      common /plots/plot
      logical plot 

      wt=0d0
      
c 1st q-pair
*
* 2-3-4 antenna
*
      call pmap4to3(i2,i3,i4,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i2,i3,i4)*G30n(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-1 antenna
*
      call pmap4to3(i3,i4,i1,i2,3,1,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i1,i3,i4)*G30n(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
        
c 2nd q-pair
*
* 4-1-2 antenna
*
      call pmap4to3(i4,i1,i2,i3,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i4,i1,i2)*G30n(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-2-3 antenna
*
      call pmap4to3(i1,i2,i3,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i3,i1,i2)*G30n(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      H40ffs = wt
      return
      end
      



c -NF/N
      function G40fsls(i1,i2,i3,i4,wtplot)
      implicit double precision(a-h,o-z)
      common /s3/s12,s13,s23
      common /yij4/y(4,4)
      common /plots/plot
      logical plot 

      wt=0d0
*
* 4-1-3 antenna
*
      call pmap4to3(i4,i1,i3,i2,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then 
           wtsub = A30(i3,i1,i4)*G30n(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-2-3 antenna
*
      call pmap4to3(i3,i2,i4,i1,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = A30(i3,i2,i4)*G30n(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      G40fsls = wt
      return
      end
      


c NF*N
      function G40flsE(i1,i2,i3,i4,wtplot)
      implicit double precision(a-h,o-z)
      common /s3/s12,s13,s23
      common /yij4/y(4,4)
      common /plots/plot
      logical plot 

      wt=0d0
 
c D30 contributions     
*
* 4-2-1 antenna
*
      call pmap4to3(i4,i2,i1,i3,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i4,i2,i1)*G30n(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-1-3 antenna
*
      call pmap4to3(i2,i1,i3,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i3,i1,i2)*G30n(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-1-2 antenna
*
      call pmap4to3(i4,i1,i2,i3,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i4,i1,i2)*G30n(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-2-3 antenna
*
      call pmap4to3(i1,i2,i3,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i3,i2,i1)*G30n(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
     
c E30 contributions
*
* 1-3-4 antenna
*
      call pmap4to3(i1,i3,i4,i2,1,3,2) 
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i1,i3,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-2 antenna
*
      call pmap4to3(i3,i4,i2,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i2,i3,i4)*F30(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

*
* 2-3-4 antenna
*
      call pmap4to3(i2,i3,i4,i1,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i2,i3,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-1 antenna
*
      call pmap4to3(i3,i4,i1,i2,3,1,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*E30(i1,i3,i4)*F30(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      G40flsE = wt
      return
      end
      
      
      
      
c NF*N
      function G40fls(i1,i2,i3,i4,wtplot)
      implicit double precision(a-h,o-z)
      common /s3/s12,s13,s23
      common /yij4/y(4,4)
      common /plots/plot
      logical plot 

      wt=0d0
 
c D30 contributions     
*
* 4-2-1 antenna
*
      call pmap4to3(i4,i2,i1,i3,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i4,i2,i1)*G30n(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-1-3 antenna
*
      call pmap4to3(i2,i1,i3,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i3,i1,i2)*G30n(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-1-2 antenna
*
      call pmap4to3(i4,i1,i2,i3,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i4,i1,i2)*G30n(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-2-3 antenna
*
      call pmap4to3(i1,i2,i3,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sd30(i3,i2,i1)*G30n(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
     
c G30 contributions
*
* 1-3-4 antenna
*
      call pmap4to3(i1,i3,i4,i2,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*G30(i1,i3,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-2 antenna
*
      call pmap4to3(i3,i4,i2,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*G30(i2,i3,i4)*F30(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

*
* 2-3-4 antenna
*
      call pmap4to3(i2,i3,i4,i1,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*G30(i2,i3,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-1 antenna
*
      call pmap4to3(i3,i4,i1,i2,3,1,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = 1d0/2d0*G30(i1,i3,i4)*F30(s12,s13,s23)*var
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif

      G40fls = wt
      return
      end




c N^2
      function F40ls(i1,i2,i3,i4,wtplot)
      implicit double precision(a-h,o-z)
      common /s3/s12,s13,s23
      common /yij4/y(4,4)
      common /plots/plot
      logical plot 

      wt=0d0
c 1234
*
* 4-1-2 antenna
*
      call pmap4to3(i4,i1,i2,i3,3,1,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i4,i1,i2)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-2-3 antenna
*
      call pmap4to3(i1,i2,i3,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i1,i2,i3)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-3-4 antenna
*
      call pmap4to3(i2,i3,i4,i1,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i2,i3,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-1 antenna
*
      call pmap4to3(i3,i4,i1,i2,3,1,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i3,i4,i1)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
c 1243
*
* 3-1-2 antenna
*
      call pmap4to3(i3,i1,i2,i4,2,1,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i3,i1,i2)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-2-4 antenna
*
      call pmap4to3(i1,i2,i4,i3,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i1,i2,i4)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-4-3 antenna
*
      call pmap4to3(i2,i4,i3,i1,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i2,i4,i3)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-3-1 antenna
*
      call pmap4to3(i4,i3,i1,i2,3,1,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i4,i3,i1)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
c 1324
*
* 4-1-3 antenna
*
      call pmap4to3(i4,i1,i3,i2,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i4,i1,i3)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-3-2 antenna
*
      call pmap4to3(i1,i3,i2,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i1,i3,i2)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-2-4 antenna
*
      call pmap4to3(i3,i2,i4,i1,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i3,i2,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-4-1 antenna
*
      call pmap4to3(i2,i4,i1,i3,2,1,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i2,i4,i1)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
c 1342
*
* 2-1-3 antenna
*
      call pmap4to3(i2,i1,i3,i4,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i2,i1,i3)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-3-4 antenna
*
      call pmap4to3(i1,i3,i4,i2,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i1,i3,i4)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-4-2 antenna
*
      call pmap4to3(i3,i4,i2,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i3,i4,i2)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-2-1 antenna
*
      call pmap4to3(i4,i2,i1,i3,3,1,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i4,i2,i1)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
c 1423
*
* 3-1-4 antenna
*
      call pmap4to3(i3,i1,i4,i2,2,3,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i3,i1,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-4-2 antenna
*
      call pmap4to3(i1,i4,i2,i3,1,2,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i1,i4,i2)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-2-3 antenna
*
      call pmap4to3(i4,i2,i3,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i4,i2,i3)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 2-3-1 antenna
*
      call pmap4to3(i2,i3,i1,i4,2,1,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i2,i3,i1)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
      
c 1432
*
* 2-1-4 antenna
*
      call pmap4to3(i2,i1,i4,i3,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i2,i1,i4)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 1-4-3 antenna
*
      call pmap4to3(i1,i4,i3,i2,1,3,2)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i1,i4,i3)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 4-3-2 antenna
*
      call pmap4to3(i4,i3,i2,i1,3,2,1)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i4,i3,i2)*F30(s12,s13,s23)*var

           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif
*
* 3-2-1 antenna
*
      call pmap4to3(i3,i2,i1,i4,2,1,3)
      call ecuts(3,var,ipass)
        if(ipass.eq.1)then
           wtsub = sf30(i3,i2,i1)*F30(s12,s13,s23)*var
           
           if(plot)then
             call bino(1,wtplot*wtsub,4)
           else
             call distrib(wtdis)
             wtsub = wtsub/wtdis
           endif
           wt=wt+wtsub
        endif


      F40ls = wt
      return
      end

